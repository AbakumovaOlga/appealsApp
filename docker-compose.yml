version: '3.5'


networks:
  kafka-network:
  rabbit-network:
  db-network:
  app-network:


services:

  postgres:
    container_name: postgres
    image: postgres:alpine
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: appealsApp
#    ports:
#      - "5432:5432"
    networks:
      - db-network
      - app-network
    volumes:
      - c:\storage\postgres:/var/lib/postgresql/data

  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:management-alpine
    restart: always
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
#    ports:
#      - "5672:5672"
    #    volumes:
    #      - c:\storage\rabbitmq:/var/lib/rabbitmq
    networks:
      - rabbit-network
      - app-network

  zookeeper:
    container_name: zookeeper
    image: bitnami/zookeeper:latest
    environment:
      ALLOW_ANONYMOUS_LOGIN: yes
    networks:
      - kafka-network

  kafka:
    container_name: kafka
    image: bitnami/kafka
    volumes:
      - c:\storage\kafka:/bitnami/kafka
    environment:
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
      ALLOW_PLAINTEXT_LISTENER: yes
    depends_on:
      - zookeeper
#    ports:
#      - "9092:9092"
    networks:
      - kafka-network
      - app-network

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui
    restart: always
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
      - SERVER_SERVLET_CONTEXT_PATH=/kafka-ui
    depends_on:
      - kafka
    networks:
      - kafka-network

  app:
    build: ./
    container_name: app
    networks:
      - app-network


  nginx:
    container_name: nginx
    image: nginx
    depends_on:
      - kafka-ui
      - rabbitmq
    volumes:
      - ./nginx-conf/myproxy.conf:/etc/nginx/conf.d/default.conf
    ports:
      - "8088:80"
    networks:
      - kafka-network
      - rabbit-network
      - app-network
